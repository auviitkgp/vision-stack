/* Auto-generated by genmsg_cpp for file /home/madhukar/ros_workspace/ip_team_auv/actionmsg/msg/markerFeedback.msg */
#ifndef ACTIONMSG_MESSAGE_MARKERFEEDBACK_H
#define ACTIONMSG_MESSAGE_MARKERFEEDBACK_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace actionmsg
{
template <class ContainerAllocator>
struct markerFeedback_ {
  typedef markerFeedback_<ContainerAllocator> Type;

  markerFeedback_()
  : errorx(0)
  , errorangle(0.0)
  {
  }

  markerFeedback_(const ContainerAllocator& _alloc)
  : errorx(0)
  , errorangle(0.0)
  {
  }

  typedef int32_t _errorx_type;
  int32_t errorx;

  typedef float _errorangle_type;
  float errorangle;


  typedef boost::shared_ptr< ::actionmsg::markerFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::actionmsg::markerFeedback_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct markerFeedback
typedef  ::actionmsg::markerFeedback_<std::allocator<void> > markerFeedback;

typedef boost::shared_ptr< ::actionmsg::markerFeedback> markerFeedbackPtr;
typedef boost::shared_ptr< ::actionmsg::markerFeedback const> markerFeedbackConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::actionmsg::markerFeedback_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::actionmsg::markerFeedback_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace actionmsg

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::actionmsg::markerFeedback_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::actionmsg::markerFeedback_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::actionmsg::markerFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ed3078b68744c9114327632d85826408";
  }

  static const char* value(const  ::actionmsg::markerFeedback_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xed3078b68744c911ULL;
  static const uint64_t static_value2 = 0x4327632d85826408ULL;
};

template<class ContainerAllocator>
struct DataType< ::actionmsg::markerFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "actionmsg/markerFeedback";
  }

  static const char* value(const  ::actionmsg::markerFeedback_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::actionmsg::markerFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#feedback\n\
int32 errorx\n\
float32 errorangle\n\
\n\
\n\
";
  }

  static const char* value(const  ::actionmsg::markerFeedback_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::actionmsg::markerFeedback_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::actionmsg::markerFeedback_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.errorx);
    stream.next(m.errorangle);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct markerFeedback_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::actionmsg::markerFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::actionmsg::markerFeedback_<ContainerAllocator> & v) 
  {
    s << indent << "errorx: ";
    Printer<int32_t>::stream(s, indent + "  ", v.errorx);
    s << indent << "errorangle: ";
    Printer<float>::stream(s, indent + "  ", v.errorangle);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ACTIONMSG_MESSAGE_MARKERFEEDBACK_H

